import { API_URL } from "./config.js";
import { showNotification } from "./utils/notification.js";
import { get_current_user } from "./auth.js";

document.addEventListener("DOMContentLoaded", async () => {
  const ordersContainer = document.getElementById("orders-list");
  const filterSelect = document.getElementById("order-filter");

  if (!ordersContainer) {
    console.warn("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  try {
    const user = await get_current_user();
    const token = localStorage.getItem("access_token");

    if (!token) {
      showNotification("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", false);
      window.location.href = "/frontend/login.html";
      return;
    }

    // --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ ---
    const loadOrders = async (statusFilter = "all") => {
      let url = `${API_URL}/orders/`;

      if (statusFilter && typeof statusFilter === "string" && statusFilter.trim().toLowerCase() !== "all") {
        const encodedStatus = encodeURIComponent(statusFilter.trim().toLowerCase());
        url += `?status=${encodedStatus}`;
      }

      console.log("üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:", url);

      const res = await fetch(url, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!res.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${res.status}`);
      }

      const orders = await res.json();
      console.log("üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", orders);

      if (!Array.isArray(orders)) {
        console.error("‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:", orders);
        ordersContainer.innerHTML = "<p>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</p>";
        return;
      }

      if (user.role === "admin") {
        displayAllOrders(ordersContainer, orders);
      } else {
        displayUserOrders(ordersContainer, orders);
      }
    };

    // --- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä ---
    if (filterSelect) {
      console.log("‚úÖ #order-filter –Ω–∞–π–¥–µ–Ω");
      console.log("üìã –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", filterSelect.value);

      // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      await loadOrders(filterSelect.value || "all");

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
      filterSelect.addEventListener("change", async () => {
        const selectedStatus = filterSelect.value || "all";
        console.log("üîÑ –í—ã–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å:", selectedStatus);
        await loadOrders(selectedStatus);
      });
    } else {
      console.error("‚ùå #order-filter –ù–ï –ù–ê–ô–î–ï–ù");
      await loadOrders("all"); // –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
    }

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤:", err);
    ordersContainer.innerHTML = "<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã</p>";
    showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã", false);
  }
});

// --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---
function displayUserOrders(container, orders) {
  container.innerHTML = "";

  if (!Array.isArray(orders) || orders.length === 0) {
    container.innerHTML = "<p>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É</p>";
    return;
  }

  orders.forEach((order) => {
    const orderDiv = document.createElement("div");
    orderDiv.className = "order-card";

    orderDiv.innerHTML = `
      <p><strong>ID:</strong> ${order.id}</p>
      <p><strong>–î–∞—Ç–∞:</strong> ${new Date(order.date).toLocaleString()}</p>
      <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${order.status}</p>
      <p><strong>–ë–ª—é–¥–∞:</strong></p>
      <ul>
        ${(Array.isArray(order.items)
          ? order.items.map(item => `<li>–ë–ª—é–¥–æ ID: ${item.dish_id}, –ö–æ–ª-–≤–æ: ${item.quantity}</li>`).join("")
          : "–ù–µ—Ç –±–ª—é–¥"
        )}
      </ul>
      <hr>
    `;

    container.appendChild(orderDiv);
  });
}

// --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞) ---
function displayAllOrders(container, orders) {
  container.innerHTML = "";

  if (!Array.isArray(orders) || orders.length === 0) {
    container.innerHTML = "<p>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>";
    return;
  }

  console.log("–í—Å–µ –∑–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω):", orders);

  orders.forEach((order) => {
    const orderDiv = document.createElement("div");
    orderDiv.className = "order-card";

    orderDiv.innerHTML = `
      <p><strong>ID –∑–∞–∫–∞–∑–∞:</strong> ${order.id}</p>
      <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ${order.user?.username || "‚Äî"} (${order.user_id})</p>
      <p><strong>–î–∞—Ç–∞:</strong> ${new Date(order.date).toLocaleString()}</p>
      <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${order.status}</p>
      <p><strong>–ë–ª—é–¥–∞:</strong></p>
      <ul>
        ${(Array.isArray(order.items)
          ? order.items.map(item => `<li>–ë–ª—é–¥–æ ID: ${item.dish_id}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}</li>`).join("")
          : "–ù–µ—Ç –±–ª—é–¥"
        )}
      </ul>
      <div class="order-actions">
        <button class="status-btn" data-id="${order.id}" data-status="in_process">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</button>
        <button class="status-btn" data-id="${order.id}" data-status="completed">–í—ã–ø–æ–ª–Ω–µ–Ω</button>
      </div>
      <hr>
    `;

    container.appendChild(orderDiv);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  document.querySelectorAll(".status-btn").forEach(button => {
    button.addEventListener("click", async () => {
      const orderId = parseInt(button.dataset.id);
      const newStatus = button.dataset.status;

      await updateOrderStatus(orderId, newStatus);

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      const filterSelect = document.getElementById("order-filter");
      const selectedStatus = filterSelect?.value || "all";
      await loadOrders(selectedStatus);
    });
  });
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ---
async function updateOrderStatus(orderId, newStatus) {
  const token = localStorage.getItem("access_token");
  if (!token) {
    showNotification("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", false);
    window.location.href = "/frontend/login.html";
    return;
  }

  try {
    const res = await fetch(`${API_URL}/orders/${orderId}/status`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`,
      },
      body: JSON.stringify({ new_status: newStatus }),
    });

    if (!res.ok) {
      const errText = await res.text();
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", errText);
      showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", false);
      return;
    }

    showNotification("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω—ë–Ω", true);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:", err);
    showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", false);
  }
}